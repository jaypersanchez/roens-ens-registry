console.log("Deployer address:", deployer.address);
const [deployer] = await ethers.getSigners();
exit
provider.getCode("0x5FbDB2315678afecb367f032d93F642f64180aa3").then(console.log);
exit
const node = ethers.utils.formatBytes32String("example");
const [owner, addr1] = await ethers.getSigners();
const ens = await ethers.getContractAt("ENSRegistry","0x5FbDB2315678afecb367f032d93F642f64180aa3")
exit
console.log(await ethers.provider.getNetwork());
eth.getCode("0xB7fF5cE08B196fd58D6F93bE279EFEfee27D1ee5")
console.log(`New owner of test.eth: ${newOwner}`);
const newOwner = await ENSRegistry.getOwner(testName);
console.log("Registered test.eth!");
await ENSRegistry.setOwner(testName, signer.address);
console.log(`Owner of test.eth: ${owner}`);
const owner = await ENSRegistry.getOwner(testName);
const testName = ethers.keccak256(ethers.toUtf8Bytes("test.eth")); // Hash a test ENS name
console.log("ENSRegistry Contract Loaded!");
const ENSRegistry = await ethers.getContractAt("ENSRegistry", "0xB7fF5cE08B196fd58D6F93bE279EFEfee27D1ee5");
console.log(await ethers.provider.getNetwork());
console.log(await provider.getNetwork());
const provider = new ethers.JsonRpcProvider("http://127.0.0.1:8545");
console.log(await ethers.provider.getNetwork());
exit
console.log(await ethers.provider.getNetwork());
exit
})
  nonce: 0  // Replace with the lowest stuck nonce
  gasPrice: web3.toWei(150, "gwei"),  // Use a much higher gas price
  gas: 21000,
  value: 0,
  to: "0xd4F44D8Aa248fC442772F3F3C715CEdc321b5d61",  // Send to yourself
  from: "0xd4F44D8Aa248fC442772F3F3C715CEdc321b5d61",
eth.sendTransaction({
console.log(`Using Address: ${signer.address}`);
const [signer] = await ethers.getSigners();
exit
console.log(`Using Address: ${signer.address}`);
const [signer] = await ethers.getSigners();
exit
console.log(accounts.map(a => a.address));
const accounts = await ethers.getSigners();
exit
const accounts = await ethers.provider.listAccounts();
console.log(`Balance: ${ethers.utils.formatEther(balance)} ETH`);
const ethers = require("ethers");
console.log(`Balance: ${ethers.utils.formatEther(balance)} ETH`);
const balance = await ethers.provider.getBalance(signer.address);
console.log(`Connected as: ${signer.address}`)
const [signer] = await ethers.getSigners();
console.log(`Balance: ${ethers.utils.formatEther(balance)} ETH`);
const balance = await ethers.provider.getBalance(signer.address);
console.log(`Connected as: ${signer.address}`);
const [signer] = await ethers.getSigners();